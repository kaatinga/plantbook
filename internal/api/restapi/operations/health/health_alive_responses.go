// Code generated by go-swagger; DO NOT EDIT.

package health

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/proplants/plantbook/internal/api/models"
)

// HealthAliveOKCode is the HTTP code returned for type HealthAliveOK
const HealthAliveOKCode int = 200

/*HealthAliveOK successful operation, service alive

swagger:response healthAliveOK
*/
type HealthAliveOK struct {
	/*The request id this is a response to

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewHealthAliveOK creates HealthAliveOK with default headers values
func NewHealthAliveOK() *HealthAliveOK {

	return &HealthAliveOK{}
}

// WithXRequestID adds the xRequestId to the health alive o k response
func (o *HealthAliveOK) WithXRequestID(xRequestID string) *HealthAliveOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the health alive o k response
func (o *HealthAliveOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the health alive o k response
func (o *HealthAliveOK) WithPayload(payload string) *HealthAliveOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the health alive o k response
func (o *HealthAliveOK) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *HealthAliveOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

/*HealthAliveDefault unexpected error

swagger:response healthAliveDefault
*/
type HealthAliveDefault struct {
	_statusCode int
	/*The request id this is a response to

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewHealthAliveDefault creates HealthAliveDefault with default headers values
func NewHealthAliveDefault(code int) *HealthAliveDefault {
	if code <= 0 {
		code = 500
	}

	return &HealthAliveDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the health alive default response
func (o *HealthAliveDefault) WithStatusCode(code int) *HealthAliveDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the health alive default response
func (o *HealthAliveDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithXRequestID adds the xRequestId to the health alive default response
func (o *HealthAliveDefault) WithXRequestID(xRequestID string) *HealthAliveDefault {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the health alive default response
func (o *HealthAliveDefault) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the health alive default response
func (o *HealthAliveDefault) WithPayload(payload *models.ErrorResponse) *HealthAliveDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the health alive default response
func (o *HealthAliveDefault) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *HealthAliveDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
