// Code generated by go-swagger; DO NOT EDIT.

package userplant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/proplants/plantbook/internal/api/models"
)

// GetUserPlantsOKCode is the HTTP code returned for type GetUserPlantsOK
const GetUserPlantsOKCode int = 200

/*GetUserPlantsOK List of the user's plants

swagger:response getUserPlantsOK
*/
type GetUserPlantsOK struct {
	/*The request id this is a response to

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.UserPlantsResponse `json:"body,omitempty"`
}

// NewGetUserPlantsOK creates GetUserPlantsOK with default headers values
func NewGetUserPlantsOK() *GetUserPlantsOK {

	return &GetUserPlantsOK{}
}

// WithXRequestID adds the xRequestId to the get user plants o k response
func (o *GetUserPlantsOK) WithXRequestID(xRequestID string) *GetUserPlantsOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get user plants o k response
func (o *GetUserPlantsOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get user plants o k response
func (o *GetUserPlantsOK) WithPayload(payload *models.UserPlantsResponse) *GetUserPlantsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user plants o k response
func (o *GetUserPlantsOK) SetPayload(payload *models.UserPlantsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserPlantsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserPlantsBadRequestCode is the HTTP code returned for type GetUserPlantsBadRequest
const GetUserPlantsBadRequestCode int = 400

/*GetUserPlantsBadRequest Invalid input

swagger:response getUserPlantsBadRequest
*/
type GetUserPlantsBadRequest struct {
}

// NewGetUserPlantsBadRequest creates GetUserPlantsBadRequest with default headers values
func NewGetUserPlantsBadRequest() *GetUserPlantsBadRequest {

	return &GetUserPlantsBadRequest{}
}

// WriteResponse to the client
func (o *GetUserPlantsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// GetUserPlantsNotFoundCode is the HTTP code returned for type GetUserPlantsNotFound
const GetUserPlantsNotFoundCode int = 404

/*GetUserPlantsNotFound Plants not found

swagger:response getUserPlantsNotFound
*/
type GetUserPlantsNotFound struct {
}

// NewGetUserPlantsNotFound creates GetUserPlantsNotFound with default headers values
func NewGetUserPlantsNotFound() *GetUserPlantsNotFound {

	return &GetUserPlantsNotFound{}
}

// WriteResponse to the client
func (o *GetUserPlantsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*GetUserPlantsDefault unexpected error

swagger:response getUserPlantsDefault
*/
type GetUserPlantsDefault struct {
	_statusCode int
	/*The request id this is a response to

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetUserPlantsDefault creates GetUserPlantsDefault with default headers values
func NewGetUserPlantsDefault(code int) *GetUserPlantsDefault {
	if code <= 0 {
		code = 500
	}

	return &GetUserPlantsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get user plants default response
func (o *GetUserPlantsDefault) WithStatusCode(code int) *GetUserPlantsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get user plants default response
func (o *GetUserPlantsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithXRequestID adds the xRequestId to the get user plants default response
func (o *GetUserPlantsDefault) WithXRequestID(xRequestID string) *GetUserPlantsDefault {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get user plants default response
func (o *GetUserPlantsDefault) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get user plants default response
func (o *GetUserPlantsDefault) WithPayload(payload *models.ErrorResponse) *GetUserPlantsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user plants default response
func (o *GetUserPlantsDefault) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserPlantsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
