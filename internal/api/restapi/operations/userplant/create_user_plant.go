// Code generated by go-swagger; DO NOT EDIT.

package userplant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// CreateUserPlantHandlerFunc turns a function with the right signature into a create user plant handler
type CreateUserPlantHandlerFunc func(CreateUserPlantParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateUserPlantHandlerFunc) Handle(params CreateUserPlantParams) middleware.Responder {
	return fn(params)
}

// CreateUserPlantHandler interface for that can handle valid create user plant params
type CreateUserPlantHandler interface {
	Handle(CreateUserPlantParams) middleware.Responder
}

// NewCreateUserPlant creates a new http.Handler for the create user plant operation
func NewCreateUserPlant(ctx *middleware.Context, handler CreateUserPlantHandler) *CreateUserPlant {
	return &CreateUserPlant{Context: ctx, Handler: handler}
}

/* CreateUserPlant swagger:route POST /api/v1/user/plants userplant createUserPlant

Add a new user's plant

Add a new user's plant

*/
type CreateUserPlant struct {
	Context *middleware.Context
	Handler CreateUserPlantHandler
}

func (o *CreateUserPlant) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewCreateUserPlantParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
