// Code generated by go-swagger; DO NOT EDIT.

package userplant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetUserPlantByIDHandlerFunc turns a function with the right signature into a get user plant by ID handler
type GetUserPlantByIDHandlerFunc func(GetUserPlantByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserPlantByIDHandlerFunc) Handle(params GetUserPlantByIDParams) middleware.Responder {
	return fn(params)
}

// GetUserPlantByIDHandler interface for that can handle valid get user plant by ID params
type GetUserPlantByIDHandler interface {
	Handle(GetUserPlantByIDParams) middleware.Responder
}

// NewGetUserPlantByID creates a new http.Handler for the get user plant by ID operation
func NewGetUserPlantByID(ctx *middleware.Context, handler GetUserPlantByIDHandler) *GetUserPlantByID {
	return &GetUserPlantByID{Context: ctx, Handler: handler}
}

/* GetUserPlantByID swagger:route GET /api/v1/user/plants/{userplant_id} userplant getUserPlantById

Get user's plant by id

Get user's plant by id

*/
type GetUserPlantByID struct {
	Context *middleware.Context
	Handler GetUserPlantByIDHandler
}

func (o *GetUserPlantByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetUserPlantByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
