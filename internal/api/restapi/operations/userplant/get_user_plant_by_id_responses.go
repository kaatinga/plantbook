// Code generated by go-swagger; DO NOT EDIT.

package userplant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/proplants/plantbook/internal/api/models"
)

// GetUserPlantByIDOKCode is the HTTP code returned for type GetUserPlantByIDOK
const GetUserPlantByIDOKCode int = 200

/*GetUserPlantByIDOK Exists user's plant

swagger:response getUserPlantByIdOK
*/
type GetUserPlantByIDOK struct {
	/*The request id this is a response to

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.UserPlant `json:"body,omitempty"`
}

// NewGetUserPlantByIDOK creates GetUserPlantByIDOK with default headers values
func NewGetUserPlantByIDOK() *GetUserPlantByIDOK {

	return &GetUserPlantByIDOK{}
}

// WithXRequestID adds the xRequestId to the get user plant by Id o k response
func (o *GetUserPlantByIDOK) WithXRequestID(xRequestID string) *GetUserPlantByIDOK {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get user plant by Id o k response
func (o *GetUserPlantByIDOK) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get user plant by Id o k response
func (o *GetUserPlantByIDOK) WithPayload(payload *models.UserPlant) *GetUserPlantByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user plant by Id o k response
func (o *GetUserPlantByIDOK) SetPayload(payload *models.UserPlant) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserPlantByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetUserPlantByIDDefault unexpected error

swagger:response getUserPlantByIdDefault
*/
type GetUserPlantByIDDefault struct {
	_statusCode int
	/*The request id this is a response to

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetUserPlantByIDDefault creates GetUserPlantByIDDefault with default headers values
func NewGetUserPlantByIDDefault(code int) *GetUserPlantByIDDefault {
	if code <= 0 {
		code = 500
	}

	return &GetUserPlantByIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get user plant by ID default response
func (o *GetUserPlantByIDDefault) WithStatusCode(code int) *GetUserPlantByIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get user plant by ID default response
func (o *GetUserPlantByIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithXRequestID adds the xRequestId to the get user plant by ID default response
func (o *GetUserPlantByIDDefault) WithXRequestID(xRequestID string) *GetUserPlantByIDDefault {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get user plant by ID default response
func (o *GetUserPlantByIDDefault) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get user plant by ID default response
func (o *GetUserPlantByIDDefault) WithPayload(payload *models.ErrorResponse) *GetUserPlantByIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user plant by ID default response
func (o *GetUserPlantByIDDefault) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserPlantByIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
