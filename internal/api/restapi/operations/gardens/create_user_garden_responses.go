// Code generated by go-swagger; DO NOT EDIT.

package gardens

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/proplants/plantbook/internal/api/models"
)

// CreateUserGardenCreatedCode is the HTTP code returned for type CreateUserGardenCreated
const CreateUserGardenCreatedCode int = 201

/*CreateUserGardenCreated New garden with id

swagger:response createUserGardenCreated
*/
type CreateUserGardenCreated struct {
	/*The request id this is a response to

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.Garden `json:"body,omitempty"`
}

// NewCreateUserGardenCreated creates CreateUserGardenCreated with default headers values
func NewCreateUserGardenCreated() *CreateUserGardenCreated {

	return &CreateUserGardenCreated{}
}

// WithXRequestID adds the xRequestId to the create user garden created response
func (o *CreateUserGardenCreated) WithXRequestID(xRequestID string) *CreateUserGardenCreated {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create user garden created response
func (o *CreateUserGardenCreated) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create user garden created response
func (o *CreateUserGardenCreated) WithPayload(payload *models.Garden) *CreateUserGardenCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create user garden created response
func (o *CreateUserGardenCreated) SetPayload(payload *models.Garden) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUserGardenCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CreateUserGardenDefault unexpected error

swagger:response createUserGardenDefault
*/
type CreateUserGardenDefault struct {
	_statusCode int
	/*The request id this is a response to

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateUserGardenDefault creates CreateUserGardenDefault with default headers values
func NewCreateUserGardenDefault(code int) *CreateUserGardenDefault {
	if code <= 0 {
		code = 500
	}

	return &CreateUserGardenDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the create user garden default response
func (o *CreateUserGardenDefault) WithStatusCode(code int) *CreateUserGardenDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the create user garden default response
func (o *CreateUserGardenDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithXRequestID adds the xRequestId to the create user garden default response
func (o *CreateUserGardenDefault) WithXRequestID(xRequestID string) *CreateUserGardenDefault {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the create user garden default response
func (o *CreateUserGardenDefault) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the create user garden default response
func (o *CreateUserGardenDefault) WithPayload(payload *models.ErrorResponse) *CreateUserGardenDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create user garden default response
func (o *CreateUserGardenDefault) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateUserGardenDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
