// Code generated by go-swagger; DO NOT EDIT.

package refplant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRefPlantsParams creates a new GetRefPlantsParams object
//
// There are no default values defined in the spec.
func NewGetRefPlantsParams() GetRefPlantsParams {

	return GetRefPlantsParams{}
}

// GetRefPlantsParams contains all the bound params for the get ref plants operation
// typically these are obtained from a http.Request
//
// swagger:parameters getRefPlants
type GetRefPlantsParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*plant category
	  In: query
	*/
	Category int32
	/*
	  In: query
	*/
	Classifiers string
	/*
	  In: query
	*/
	FloweringTime string
	/*
	  In: query
	*/
	Hight string
	/*
	  In: query
	*/
	Kind string
	/*
	  Required: true
	  In: query
	*/
	Limit int32
	/*
	  Required: true
	  In: query
	*/
	Offset int32
	/*
	  In: query
	*/
	RecommendPosition string
	/*
	  In: query
	*/
	RegardToLight string
	/*
	  In: query
	*/
	RegardToMoisture string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetRefPlantsParams() beforehand.
func (o *GetRefPlantsParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qCategory, qhkCategory, _ := qs.GetOK("category")
	if err := o.bindCategory(qCategory, qhkCategory, route.Formats); err != nil {
		res = append(res, err)
	}

	qClassifiers, qhkClassifiers, _ := qs.GetOK("classifiers")
	if err := o.bindClassifiers(qClassifiers, qhkClassifiers, route.Formats); err != nil {
		res = append(res, err)
	}

	qFloweringTime, qhkFloweringTime, _ := qs.GetOK("floweringTime")
	if err := o.bindFloweringTime(qFloweringTime, qhkFloweringTime, route.Formats); err != nil {
		res = append(res, err)
	}

	qHight, qhkHight, _ := qs.GetOK("hight")
	if err := o.bindHight(qHight, qhkHight, route.Formats); err != nil {
		res = append(res, err)
	}

	qKind, qhkKind, _ := qs.GetOK("kind")
	if err := o.bindKind(qKind, qhkKind, route.Formats); err != nil {
		res = append(res, err)
	}

	qLimit, qhkLimit, _ := qs.GetOK("limit")
	if err := o.bindLimit(qLimit, qhkLimit, route.Formats); err != nil {
		res = append(res, err)
	}

	qOffset, qhkOffset, _ := qs.GetOK("offset")
	if err := o.bindOffset(qOffset, qhkOffset, route.Formats); err != nil {
		res = append(res, err)
	}

	qRecommendPosition, qhkRecommendPosition, _ := qs.GetOK("recommendPosition")
	if err := o.bindRecommendPosition(qRecommendPosition, qhkRecommendPosition, route.Formats); err != nil {
		res = append(res, err)
	}

	qRegardToLight, qhkRegardToLight, _ := qs.GetOK("regardToLight")
	if err := o.bindRegardToLight(qRegardToLight, qhkRegardToLight, route.Formats); err != nil {
		res = append(res, err)
	}

	qRegardToMoisture, qhkRegardToMoisture, _ := qs.GetOK("regardToMoisture")
	if err := o.bindRegardToMoisture(qRegardToMoisture, qhkRegardToMoisture, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCategory binds and validates parameter Category from query.
func (o *GetRefPlantsParams) bindCategory(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: true

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("category", "query", "int32", raw)
	}
	o.Category = value

	return nil
}

// bindClassifiers binds and validates parameter Classifiers from query.
func (o *GetRefPlantsParams) bindClassifiers(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: true

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Classifiers = raw

	return nil
}

// bindFloweringTime binds and validates parameter FloweringTime from query.
func (o *GetRefPlantsParams) bindFloweringTime(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: true

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.FloweringTime = raw

	return nil
}

// bindHight binds and validates parameter Hight from query.
func (o *GetRefPlantsParams) bindHight(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: true

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Hight = raw

	return nil
}

// bindKind binds and validates parameter Kind from query.
func (o *GetRefPlantsParams) bindKind(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: true

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Kind = raw

	return nil
}

// bindLimit binds and validates parameter Limit from query.
func (o *GetRefPlantsParams) bindLimit(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("limit", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: true

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("limit", "query", "int32", raw)
	}
	o.Limit = value

	return nil
}

// bindOffset binds and validates parameter Offset from query.
func (o *GetRefPlantsParams) bindOffset(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("offset", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: true

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("offset", "query", "int32", raw)
	}
	o.Offset = value

	return nil
}

// bindRecommendPosition binds and validates parameter RecommendPosition from query.
func (o *GetRefPlantsParams) bindRecommendPosition(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: true

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.RecommendPosition = raw

	return nil
}

// bindRegardToLight binds and validates parameter RegardToLight from query.
func (o *GetRefPlantsParams) bindRegardToLight(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: true

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.RegardToLight = raw

	return nil
}

// bindRegardToMoisture binds and validates parameter RegardToMoisture from query.
func (o *GetRefPlantsParams) bindRegardToMoisture(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: true

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.RegardToMoisture = raw

	return nil
}
