// Code generated by go-swagger; DO NOT EDIT.

package refplant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/proplants/plantbook/internal/api/models"
)

// GetRefPlantByIDOKCode is the HTTP code returned for type GetRefPlantByIDOK
const GetRefPlantByIDOKCode int = 200

/*GetRefPlantByIDOK successful operation

swagger:response getRefPlantByIdOK
*/
type GetRefPlantByIDOK struct {

	/*
	  In: Body
	*/
	Payload *models.RefPlant `json:"body,omitempty"`
}

// NewGetRefPlantByIDOK creates GetRefPlantByIDOK with default headers values
func NewGetRefPlantByIDOK() *GetRefPlantByIDOK {

	return &GetRefPlantByIDOK{}
}

// WithPayload adds the payload to the get ref plant by Id o k response
func (o *GetRefPlantByIDOK) WithPayload(payload *models.RefPlant) *GetRefPlantByIDOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get ref plant by Id o k response
func (o *GetRefPlantByIDOK) SetPayload(payload *models.RefPlant) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRefPlantByIDOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRefPlantByIDBadRequestCode is the HTTP code returned for type GetRefPlantByIDBadRequest
const GetRefPlantByIDBadRequestCode int = 400

/*GetRefPlantByIDBadRequest Invalid ID supplied

swagger:response getRefPlantByIdBadRequest
*/
type GetRefPlantByIDBadRequest struct {
}

// NewGetRefPlantByIDBadRequest creates GetRefPlantByIDBadRequest with default headers values
func NewGetRefPlantByIDBadRequest() *GetRefPlantByIDBadRequest {

	return &GetRefPlantByIDBadRequest{}
}

// WriteResponse to the client
func (o *GetRefPlantByIDBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// GetRefPlantByIDNotFoundCode is the HTTP code returned for type GetRefPlantByIDNotFound
const GetRefPlantByIDNotFoundCode int = 404

/*GetRefPlantByIDNotFound Plant not found

swagger:response getRefPlantByIdNotFound
*/
type GetRefPlantByIDNotFound struct {
}

// NewGetRefPlantByIDNotFound creates GetRefPlantByIDNotFound with default headers values
func NewGetRefPlantByIDNotFound() *GetRefPlantByIDNotFound {

	return &GetRefPlantByIDNotFound{}
}

// WriteResponse to the client
func (o *GetRefPlantByIDNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*GetRefPlantByIDDefault unexpected error

swagger:response getRefPlantByIdDefault
*/
type GetRefPlantByIDDefault struct {
	_statusCode int
	/*The request id this is a response to

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetRefPlantByIDDefault creates GetRefPlantByIDDefault with default headers values
func NewGetRefPlantByIDDefault(code int) *GetRefPlantByIDDefault {
	if code <= 0 {
		code = 500
	}

	return &GetRefPlantByIDDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get ref plant by Id default response
func (o *GetRefPlantByIDDefault) WithStatusCode(code int) *GetRefPlantByIDDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get ref plant by Id default response
func (o *GetRefPlantByIDDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithXRequestID adds the xRequestId to the get ref plant by Id default response
func (o *GetRefPlantByIDDefault) WithXRequestID(xRequestID string) *GetRefPlantByIDDefault {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get ref plant by Id default response
func (o *GetRefPlantByIDDefault) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get ref plant by Id default response
func (o *GetRefPlantByIDDefault) WithPayload(payload *models.ErrorResponse) *GetRefPlantByIDDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get ref plant by Id default response
func (o *GetRefPlantByIDDefault) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRefPlantByIDDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
