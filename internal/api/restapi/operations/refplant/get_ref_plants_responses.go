// Code generated by go-swagger; DO NOT EDIT.

package refplant

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/proplants/plantbook/internal/api/models"
)

// GetRefPlantsOKCode is the HTTP code returned for type GetRefPlantsOK
const GetRefPlantsOKCode int = 200

/*GetRefPlantsOK successful operation

swagger:response getRefPlantsOK
*/
type GetRefPlantsOK struct {

	/*
	  In: Body
	*/
	Payload []*models.RefPlant `json:"body,omitempty"`
}

// NewGetRefPlantsOK creates GetRefPlantsOK with default headers values
func NewGetRefPlantsOK() *GetRefPlantsOK {

	return &GetRefPlantsOK{}
}

// WithPayload adds the payload to the get ref plants o k response
func (o *GetRefPlantsOK) WithPayload(payload []*models.RefPlant) *GetRefPlantsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get ref plants o k response
func (o *GetRefPlantsOK) SetPayload(payload []*models.RefPlant) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRefPlantsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.RefPlant, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetRefPlantsBadRequestCode is the HTTP code returned for type GetRefPlantsBadRequest
const GetRefPlantsBadRequestCode int = 400

/*GetRefPlantsBadRequest Invalid input

swagger:response getRefPlantsBadRequest
*/
type GetRefPlantsBadRequest struct {
}

// NewGetRefPlantsBadRequest creates GetRefPlantsBadRequest with default headers values
func NewGetRefPlantsBadRequest() *GetRefPlantsBadRequest {

	return &GetRefPlantsBadRequest{}
}

// WriteResponse to the client
func (o *GetRefPlantsBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// GetRefPlantsNotFoundCode is the HTTP code returned for type GetRefPlantsNotFound
const GetRefPlantsNotFoundCode int = 404

/*GetRefPlantsNotFound Plants not found

swagger:response getRefPlantsNotFound
*/
type GetRefPlantsNotFound struct {
}

// NewGetRefPlantsNotFound creates GetRefPlantsNotFound with default headers values
func NewGetRefPlantsNotFound() *GetRefPlantsNotFound {

	return &GetRefPlantsNotFound{}
}

// WriteResponse to the client
func (o *GetRefPlantsNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(404)
}

/*GetRefPlantsDefault unexpected error

swagger:response getRefPlantsDefault
*/
type GetRefPlantsDefault struct {
	_statusCode int
	/*The request id this is a response to

	 */
	XRequestID string `json:"X-Request-Id"`

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetRefPlantsDefault creates GetRefPlantsDefault with default headers values
func NewGetRefPlantsDefault(code int) *GetRefPlantsDefault {
	if code <= 0 {
		code = 500
	}

	return &GetRefPlantsDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get ref plants default response
func (o *GetRefPlantsDefault) WithStatusCode(code int) *GetRefPlantsDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get ref plants default response
func (o *GetRefPlantsDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithXRequestID adds the xRequestId to the get ref plants default response
func (o *GetRefPlantsDefault) WithXRequestID(xRequestID string) *GetRefPlantsDefault {
	o.XRequestID = xRequestID
	return o
}

// SetXRequestID sets the xRequestId to the get ref plants default response
func (o *GetRefPlantsDefault) SetXRequestID(xRequestID string) {
	o.XRequestID = xRequestID
}

// WithPayload adds the payload to the get ref plants default response
func (o *GetRefPlantsDefault) WithPayload(payload *models.ErrorResponse) *GetRefPlantsDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get ref plants default response
func (o *GetRefPlantsDefault) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRefPlantsDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header X-Request-Id

	xRequestID := o.XRequestID
	if xRequestID != "" {
		rw.Header().Set("X-Request-Id", xRequestID)
	}

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
