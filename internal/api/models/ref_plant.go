// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RefPlant ref plant
//
// swagger:model RefPlant
type RefPlant struct {

	// category
	Category int32 `json:"category,omitempty"`

	// created at
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// creater
	Creater string `json:"creater,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// images
	// Required: true
	Images []string `json:"images"`

	// infos
	Infos []*Info `json:"infos"`

	// modified at
	// Min Length: 0
	// Format: date-time
	ModifiedAt strfmt.DateTime `json:"modifiedAt,omitempty"`

	// modifier
	// Min Length: 0
	Modifier *string `json:"modifier,omitempty"`

	// short info
	ShortInfo *ShortInfo `json:"shortInfo,omitempty"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this ref plant
func (m *RefPlant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInfos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShortInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RefPlant) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RefPlant) validateImages(formats strfmt.Registry) error {

	if err := validate.Required("images", "body", m.Images); err != nil {
		return err
	}

	return nil
}

func (m *RefPlant) validateInfos(formats strfmt.Registry) error {
	if swag.IsZero(m.Infos) { // not required
		return nil
	}

	for i := 0; i < len(m.Infos); i++ {
		if swag.IsZero(m.Infos[i]) { // not required
			continue
		}

		if m.Infos[i] != nil {
			if err := m.Infos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("infos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RefPlant) validateModifiedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ModifiedAt) { // not required
		return nil
	}

	if err := validate.MinLength("modifiedAt", "body", m.ModifiedAt.String(), 0); err != nil {
		return err
	}

	if err := validate.FormatOf("modifiedAt", "body", "date-time", m.ModifiedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RefPlant) validateModifier(formats strfmt.Registry) error {
	if swag.IsZero(m.Modifier) { // not required
		return nil
	}

	if err := validate.MinLength("modifier", "body", *m.Modifier, 0); err != nil {
		return err
	}

	return nil
}

func (m *RefPlant) validateShortInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ShortInfo) { // not required
		return nil
	}

	if m.ShortInfo != nil {
		if err := m.ShortInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shortInfo")
			}
			return err
		}
	}

	return nil
}

func (m *RefPlant) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this ref plant based on the context it is used
func (m *RefPlant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInfos(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShortInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RefPlant) contextValidateInfos(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Infos); i++ {

		if m.Infos[i] != nil {
			if err := m.Infos[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("infos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RefPlant) contextValidateShortInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ShortInfo != nil {
		if err := m.ShortInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shortInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RefPlant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RefPlant) UnmarshalBinary(b []byte) error {
	var res RefPlant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
